from aiogram import Router, types, F
from aiogram.filters import Command
import aiosqlite
from data.quiz_data import quiz_data
from utils.keyboards import generate_options_keyboard
from database.db_operations import (
    get_quiz_index, 
    update_quiz_index, 
    update_current_attempt, 
    start_new_attempt, 
    finish_attempt,
    get_current_attempt_stats  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
)
from config.config import DB_NAME

router = Router()

@router.message(F.text == "üéÆ –ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    await message.answer("‚öîÔ∏è –í–ø–µ—Ä–µ–¥, –ò–∑–±—Ä–∞–Ω–Ω—ã–π! –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!")
    await new_quiz(message)

async def new_quiz(message):
    user_id = message.from_user.id
    await update_quiz_index(user_id, 0)
    await start_new_attempt(user_id)
    await get_question(message, user_id)

async def get_question(message, user_id):
    current_question_index = await get_quiz_index(user_id)
    
    if current_question_index >= len(quiz_data):
        await finish_quiz(message, user_id)
        return
    
    question_data = quiz_data[current_question_index]
    correct_index = question_data['correct_option']
    opts = question_data['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(quiz_data)}:\n{question_data['question']}"
    await message.answer(question_text, reply_markup=kb)

@router.callback_query(F.data.startswith("right_"))
async def right_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_question_index = await get_quiz_index(user_id)
    selected_index = int(callback.data.split("_")[1])
    
    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    selected_option = quiz_data[current_question_index]['options'][selected_index]
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_option}")
    await callback.message.answer("üéØ –í–µ—Ä–Ω–æ!")
    
    await update_current_attempt(user_id, True)
    
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)
    
    if current_question_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        await finish_quiz(callback.message, user_id)

@router.callback_query(F.data.startswith("wrong_"))
async def wrong_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_question_index = await get_quiz_index(user_id)
    selected_index = int(callback.data.split("_")[1])
    
    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    selected_option = quiz_data[current_question_index]['options'][selected_index]
    await callback.message.answer(f"‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_option}")
    
    correct_option = quiz_data[current_question_index]['options'][quiz_data[current_question_index]['correct_option']]
    await callback.message.answer(f"üìå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}")
    
    if 'explanation' in quiz_data[current_question_index]:
        await callback.message.answer(f"üí° {quiz_data[current_question_index]['explanation']}")
    
    await update_current_attempt(user_id, False)
    
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)
    
    if current_question_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        await finish_quiz(callback.message, user_id)

async def finish_quiz(message, user_id):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¢–û–õ–¨–ö–û —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏
    correct, wrong, score = await finish_attempt(user_id, message.from_user.username)
    
    if correct + wrong == len(quiz_data):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        result_text = f"""
        üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!
        
        üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏:
        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}
        ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong}
        üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {score}%
        
        {'üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –∏—Å—Ç–∏–Ω–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –≠–ª–¥–µ–Ω–∞!' if score >= 80 else 
          '‚öîÔ∏è –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!' if score >= 60 else 
          'üî• –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏! –ò–≥—Ä–∞–π—Ç–µ —Å–Ω–æ–≤–∞!'}
        
        üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /stats
        üéÆ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É: /quiz
        """
    else:
        result_text = "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /quiz"
    
    await message.answer(result_text)

@router.message(Command("reset_stats"))
async def cmd_reset_stats(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('DELETE FROM user_stats WHERE user_id = ?', (user_id,))
        await db.execute('DELETE FROM current_attempt WHERE user_id = ?', (user_id,))
        await db.execute('DELETE FROM quiz_state WHERE user_id = ?', (user_id,))
        await db.commit()
    
    await message.answer("üîÑ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /quiz")