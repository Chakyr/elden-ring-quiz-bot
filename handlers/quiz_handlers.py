from aiogram import Router, types, F
from aiogram.filters import Command
import aiosqlite
from data.quiz_data import quiz_data
from utils.keyboards import generate_options_keyboard
from database.db_operations import get_quiz_index, update_quiz_index, update_user_stats, update_last_score
from config.config import DB_NAME

router = Router()

@router.message(F.text == "üéÆ –ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    await message.answer("‚öîÔ∏è –í–ø–µ—Ä–µ–¥, –ò–∑–±—Ä–∞–Ω–Ω—ã–π! –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!")
    await new_quiz(message)

async def new_quiz(message):
    user_id = message.from_user.id
    await update_quiz_index(user_id, 0)
    await get_question(message, user_id)

async def get_question(message, user_id):
    current_question_index = await get_quiz_index(user_id)
    
    if current_question_index >= len(quiz_data):
        await finish_quiz(message, user_id)
        return
    
    question_data = quiz_data[current_question_index]
    correct_index = question_data['correct_option']
    opts = question_data['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(quiz_data)}:\n{question_data['question']}"
    await message.answer(question_text, reply_markup=kb)

@router.callback_query(F.data.startswith("right_"))
async def right_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_question_index = await get_quiz_index(user_id)
    selected_index = int(callback.data.split("_")[1])
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    selected_option = quiz_data[current_question_index]['options'][selected_index]
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_option}")
    await callback.message.answer("üéØ –í–µ—Ä–Ω–æ!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await update_user_stats(user_id, callback.from_user.username, True)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)
    
    if current_question_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        await finish_quiz(callback.message, user_id)

@router.callback_query(F.data.startswith("wrong_"))
async def wrong_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_question_index = await get_quiz_index(user_id)
    selected_index = int(callback.data.split("_")[1])
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    selected_option = quiz_data[current_question_index]['options'][selected_index]
    await callback.message.answer(f"‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_option}")
    
    correct_option = quiz_data[current_question_index]['options'][quiz_data[current_question_index]['correct_option']]
    await callback.message.answer(f"üìå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}")
    
    if 'explanation' in quiz_data[current_question_index]:
        await callback.message.answer(f"üí° {quiz_data[current_question_index]['explanation']}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await update_user_stats(user_id, callback.from_user.username, False)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)
    
    if current_question_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        await finish_quiz(callback.message, user_id)

async def finish_quiz(message, user_id):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute('''SELECT total_correct, total_wrong FROM user_stats 
                              WHERE user_id = ?''', (user_id,)) as cursor:
            stats = await cursor.fetchone()
    
    if stats:
        correct, wrong = stats
        total = correct + wrong
        score = int((correct / total) * 100) if total > 0 else 0
        
        await update_last_score(user_id, score)
        
        result_text = f"""
        üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!
        
        üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}
        ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong}
        üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {score}%
        
        {'üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –∏—Å—Ç–∏–Ω–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –≠–ª–¥–µ–Ω–∞!' if score >= 80 else 
          '‚öîÔ∏è –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!' if score >= 60 else 
          'üî• –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏! –ò–≥—Ä–∞–π—Ç–µ —Å–Ω–æ–≤–∞!'}
        
        üéÆ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑? /quiz
        """
    else:
        result_text = "üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! üéÆ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /quiz"
    
    await message.answer(result_text)